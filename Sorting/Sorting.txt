Sorting is simply arranging data in ascending or descending order. 
 
 Tupes of sorting 
 1 - Space Used - 
 i) inplace - Does not require extra space - buule sort 
 
 ii) out of place  - requires extra space - merge sort 

 2 - Stability -
  i)stable  - The order of similar data is not changed post sorting - insertion sort 
  ii) unstable - The order of similar data is changed - quick sort 
  Terminology - 
  Increasing order - If successive element is greater than the previous element
  Decreasing order - If successive element is less than the previous element
  Non Increasing order - If successive element is less than or equal to the previous element
  Non Decreasing order - If successive element is greater than or equal to the previous element

  Different types of sorting : 
  1) Bubble sort - We repeatedly compare each pair of adjacent elements and swap them if they are in wrong order. 
  T(n) -> O(n^2) , S(n) -> O(1)
  When to use - i) elements are almost sorted , 2) space is a concern
  When to avoid - i)elements are large in number 

  2) Selection sort - Find the minimum element and move it to the sorted part of the array to make the unsorted part sorted 
  
T(n) -> O(n^2) , S(n) -> O(1)
  When to use - i) when we have less memory 
  When to avoid - i) time is important 

  3) Insertion sort - Divide the array into two parts . Take first element from the unsorted part of the array and move
  to its appropriate position in the sorted array . Repeat until unsorted array is empty 

  T(n) -> O(n^2) , S(n) -> O(1)
  When to use - i) when we have less memory ii) there is continuous flow of elements 
  When to avoid - i) time is important 

  4) Bucket sort : i) We create buckets and distribute elemnents into buckets  , creation of buckets depends 
  on an ideal function which in turn is dependent on the number of elements ii) sort each bucket iii)merge the 
  buckets to get a sorted list of elements.

  T(n) -> O(n log n) , S(n) -> O(n)
  When to use - i) when the elemnts are uniformly distributed . e.g. - 1,2,3,5,6,4,9  , dont use e.g- 100,2,3001.20
  When to avoid - i) space is important 

  5)Merge Sort i) It works on divide and conquer apporach ii) divide the elements into two  halves recursively
  until it is too small that it cannot be broken further  iii)merge the  halves by sorting them  

    T(n) -> O(n log n) , S(n) -> O(n)
  When to use - i) when you need stable sort i.e. order of the elements needs to be maintained ii) time is O(nlog n)
  When to avoid - i) space is important 

  6) Quick sort - i) It is a divide and conquer algorithm. ii) Find pivot number and make sure 
  smaller numbers are located at the left of pivot and larger numbers are located at the right of the pivot.iii) Unlike 
  merge sort extra sapce is not required 

    T(n) -> O(n log n) , S(n) -> O(1)
  When to use - i) when you need stable sort i.e. order of the elements needs to be maintained ii) time is O(nlog n)
  When to avoid - i) space is important 

  7) Heap Sort - i) insert the elements in the  heap (bottom to top) , ii) extract head of the heap (top to bottom)
   T(n) -> O(n log n) , S(n) -> O(1)
  When to use - i) When space is important  ii) time is O(nlog n)
  When to avoid - i) when stability is important 

  Name            Time Complexity   Space Complexity   Stable
----------------------------------------------------------
Bubble Sort     O(n^2)            O(1)               Yes
Selection Sort  O(n^2)            O(1)               No
Insertion Sort  O(n^2)            O(1)               Yes
Bucket Sort     O(n logn)         O(n)               Yes
Merge Sort      O(n logn)         O(n)               Yes
Quick Sort      O(n logn)         O(n)               No
Heap Sort       O(n logn)         O(1)               No






