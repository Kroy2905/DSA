Graph is a non linear data structure which consists of finite set of nodes(vertices) and  set of edge that connect graph . 
Graphs are used to represent networks . e.g. - a train network 
Tree data structure  could have been used to represent the network but trees dont have circular path between nodes .

Terminologies : 
- vertices - Vertices are the nodes in the graph
- edge - Edge is the lines that connect the nodes in the graph.
- unweighted graph - Unweighted graph is a graph which does not have any weight associated with the edge 

    (n1)---------(n2)
     | \           / |
     |  \         /  |
     |   \       /   |
     |    \     /    |
    (n3)-----(n4)
       \       /
        \     /
         \   /
          (n5)
- weighted graph - Weighted graph is a graph which has  weight associated with the edge

    (n1)------5------(n2)
     | \              / |
     |  \            /  |
     3   7          4   2
     |    \        /    |
     |     \      /     |
    (n3)------6------(n4)

- undirected graph - the edges dont have any direction 

     (n1)---------(n2)
     | \           / |
     |  \         /  |
     |   \       /   |
     |    \     /    |
    (n3)-----(n4)
       \       /
        \     /
         \   /
          (n5)

- directed graph - the edges  have  direction

    (n1) ----> (n2)
     ^ \         / |
     |  \       /  v
     |   v     v   |
    (n3) <---- (n4)
       \         /
        \       v
         (n5)

- cyclic graph - if the graph hsa atleast one loop 

    (n1)------(n2)
     |         / |
     |        /  |
     |       /   |
     |      /    |
    (n3)---(n4)  |
       \     |   |
        \    |   |
         \   |   |
          \  |   |
           (n5)--|
In this undirected cyclic graph, there are multiple cycles, such as:

    n1 -> n3 -> n4 -> n2 -> n1
    n4 -> n5 -> n3 -> n4

    (n1) ----> (n2)
     ^ \        / |
     |  \      /  v
     |   v    v   |
    (n3) <-- (n4)
       \         /
        \       v
         \     (n5)
          \      ^
           \----/


In this directed cyclic graph, there are cycles like:

    n1 -> n2 -> n4 -> n3 -> n1
    n4 -> n5 -> n4

- Acyclic graph - there is no loop in the graph 
- A tree is a special case of directed acyclic graph 

Representation of graph in code - A graph can be represented via adjacent matrix or 2-D matrix. Elements of the matrix tells
whether the pair of verices are adjacent/connected or not in graph 

    (n1)------(n2)
     | \       / |
     |  \     /  |
     |   \   /   |
     |    \ /    |
    (n3)---(n4)  |
       \     |   |
        \    |   |
         \   |   |
          \  |   |
           (n5)  |


The adjacency matrix for this graph is a square matrix used to represent a finite graph. The elements of the matrix indicate whether pairs of vertices are adjacent or not in the graph.


The adjacency matrix A for this graph is:
A=
   n1 n2 n3 n4 n5
n1  0  1  1  1  0
n2  1  0  0  1  0
n3  1  0  0  1  1
n4  1  1  1  0  1
n5  0  0  1  1  0

â€‹Representation  via adjacency list - An adjacency list is a collection of unordered list used to represent the graph. Each 
list describes the set of neighbors of a vertex in a graph .
adjacency list : 

n1: n2, n3,n4
n2: n1, n4,
n3: n1, n4, n5
n4: n1,n2, n3,
n5: n3, n4
When to use adjacency list vs adjacent matrix . : IF the graph is complete or almost complete we use adjacent matrix 
and if the graph does not have many edges , we use adjacency list

-------------------------------------------------  SEARCHING ALGO ------------------------------------------------
Breadth first search - It is a traversing algorithm  in graph , where an arbitary vertex is selected and all the 
neighboring vertices(at that same level )  are explored , before going to the neighbors in the next level . It as good as 
level order traversing 
Time complexity  - O(V+E)  ( vertex and edge )
Space Complexity - O(V+E)
    (n1)------(n2)
     |          |\
     |          | \
     |          |  \
     |          |   \
    (n3)------(n4)  (n5)
     |          |   /
     |          |  /
     |          | /
     |          |/
    (n6)-------(n7)  

    BFS  = n1,n2,n3,n4,n5,n6,n7
    Process - 
    1. Enque a starting vertex 
    2. while queue is not empty 
        {
            p=dequeueu()
            if(p is not visited)
            {
                mark it visited 
                enqueue all unvisited adjacent vertices 
                
            }
        }

Depth first search - It is a traversing algorithm  in graph , where an arbitary vertex is selected and explores as far as possible
along each edge before backtracking. It is implemented using stack 
Time complexity  - O(V+E)  ( vertex and edge )
Space Complexity - O(V+E)
    (n1)------(n2)
     |          |\
     |          | \
     |          |  \
     |          |   \
    (n3)------(n4)  (n5)
     |          |   /
     |          |  /
     |          | /
     |          |/
    (n6)-------(n7)  

    BFS  = n1,n3,n6,n7,n4,n2,n5
    Process - 
    1. Push a starting vertex 
    2. while stack is not empty 
        {
            p=pop()
            if(p is not visited)
            {
                mark it visited 
                push all unvisited adjacent vertices 
                
            }
        }

|                       | BFS                                                        | DFS                               |
|-----------------------|----------------------------------                          |-----------------------------------|
| How does it work internally? | It goes in breadth first                            | It goes in depth first            |
| Which DS does it use internally? | Queue                                           | Stack                             |
| Time Complexity       | O(V+E)                                                     | O(V+E)                            |
| Space Complexity      | O(V+E)                                                     | O(V+E)                            |
| When to use?          | If we know that the target is close to the starting point   | If we already know that the target vertex is buried very deep |

      
Topological sort - Sorts the vertices in such a way that  if any action(vertex) is dependent on any other action , then the 
dependent vertex will always come first .
    A       B
     |    / | 
     v  <   v   
     C      D   
      \     |   
       v    |  
       E    | 
      / \  / 
    v   v v  
    H    F   
         |      
         v      
         G      

algorithm : 
if a vertex depends on curr vertex 
go to that vertex and comeback to current vertex
else 
push current vertex to stack 
Time complexity : O(V+E) Space complexity - O(V+E)

Single Source Shortest Path Problem : SSSPP  - Find the shortest path from one vertex (given) to other verices such that 
the toal distance between them is minimum 
It can be solved by - BFS , Dijkstra's algorithm , Bellman Ford  algorithm
Time Complexity of SSSPP using BFS  : O(E) Space complexity - O(V)
Why BFS cannot be used for weighted graphs for SSSPP : Because BFS was design for single/np weighted graphs. BFS  may give the 
shortest path from one vertex but it will not give  least weighted shortest path 

